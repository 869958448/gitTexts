	一，版本库，又名仓库，英文名repository。相当于一个目录，里面的所有文件都可以被git管理起来。
		
操作：
	1.先创建一个目录当做仓库，当然也可以不是一个新目录。 在这里假设目录名为：learngit
		  mkdir learngit 
     
	2.将此目录变为git仓库。    
		git init	
	   	创建完成后会有提示信息：Initialized empty Git repository in ... （为新仓库）
	
	3.将所要添加的文件放到此目录下，并将其添加到仓库中。 在这里假设文件名为：file.txt
		git add file.txt
	
	4.吧文件提交到仓库中。
		git commit -m “这里写提示信息”
		
	5.当文件修改后，可利用命令 git status 来查看修改的状态，但是此命令不能看到修改了什么内容。
	
	6.若想查看文件被修改的具体内容，使用命令： git diff 文件名 

	7.可以随时用命令 git status 查看掌握工作区的状态。

	像这样，你不断对文件进行修改，然后不断提交修改到版本库里，就好比玩RPG游戏时，每通过一关就会自动把游戏状态存盘，如果某一关没过去，你还可以选择读取前一关的状态。	有些时候，在打Boss之前，你会手动存盘，以便万一打Boss失败了，可以从最近的地方重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，	这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。

	8.若想查看以前提交的历史记录，可使用命令 git log ，显示的是从最近修改到最远修改的顺序。
	  若感觉输出的信息太多，则可以使用命令 git log --pretty=oneline 来查看。

	9.在git中，用HEAD表示当前版本，上一版本是HEAD^，上上一版本是HEAD^^.往上第100个版本用HEAD~100.

	10.想要回退到上一版本，使用命令 git reset。 如 ： git reset --hard HEAD^

	11.但是当回到以前版本之后，最新的版本就看不到了，想回到最新的版本只能通过版本id，即commit id 来找，
	   只需要前几位就可以了。 命令为： git reset --hard 版本号前几位

	12.若你回退到某一版本号后，第二天后悔了，这时可通过命令 git reflog 来查看历史命令，即以前输过的命令。	

	13.工作区和暂存区：
	    Git和其他版本控制系统如SVN不同的地方就是有暂存区的概念。
	     工作区：就是电脑里能看到的目录，如learngit就是一个工作区。
	      版本库：learngit工作区里的隐藏目录.git，其中存放了很多东西，最终最重要的是称为stage（或者叫index）
		      的暂存区，还有git为我们创建的第一个分支master，以及指向master的一个指针HEAD。
	      git add的实质就是将文件添加到暂存区中。git commit实质就是将暂存区的所有内容提交到当前分支。
	
	14.撤销修改： git checkout -- file.txt  吧file.txt文件在工作区的修改全部撤销，有两种情况：
		      一. file.txt文件修改后还没放到暂存区，撤销后就回到和版本库一模一样的状态。
		      二. file.txt文件修改后已经添加到暂存区中，又作了修改，撤销后就回到添加到暂存区后的状态。
			总之，就是让这个文件回到最近一次git commit 或git add 的状态。

	15.撤销已添加到暂存区的修改：git reset HEAD file.txt  就是可以吧暂存区的修改退回到工作区。
				      此命令既可以回退版本，也可以吧暂存区的修改退回到工作区。
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 git checkout -- file.txt

		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
			第一步用命令git reset HEAD file.txt ，就回到了场景1，第二步按场景1操作。

		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库.
	
	16.命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删.
	   git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

     GitHub ---神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免		    	       费获得Git远程仓库。
	       注册方法：
		 一.创建SSH key. 命令：ssh-keygen -t rsa -C "youremail@example.com" ，之后一路回车即可。
		     如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key			     的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
		     （.ssh文件是隐藏文件，只能用shell命令查看。）
		二.登陆GitHub（自己注册账号），打开“Account settings”，“SSH Keys”页面：点“Add SSH Key”，
		   填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。

     	为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以	 GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。

      -----“有了远程仓库，妈妈再也不用担心我的硬盘了。”――Git点读机

	二，远程仓库-------
	   
	    1. 情景：你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同				           步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。
	     步骤：
		1--在GitHub上创建一个新的仓库，名字填learngit（无所谓）即可，其他默认设置即可。
		2--将本地仓库与GitHub上的仓库关联起来，在本地仓库的shell窗口使用命令：
				git remote add origin https://github.com/GitHub账户名/learngit.git
			
		   或者使用命令:git remote add origin git@github.com:/GitHub账户名/learngit.git	
		
			结果一样，只是有点区别：使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，
			但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。	

		3--将本地库的所有内容推送到远程库上： git push -u origin master

		    把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
		    由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新		   	    的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

		4--推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样.
		
		5--从现在起，只要本地作了提交，就可以通过命令:git push origin master 把本地master分支的最新修改推送至GitHub		           现在，就拥有了真正的分布式版本库！

		分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而		    		SVN在没有联网的时候是拒绝干活的!
		
	     2.从远程库克隆
		步骤：
		   1--登录Github，创建一个新的仓库，名字为gitskills（随便）。勾选Initialize this repository with a README，			   这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件。
		   
		   2--是用命令git clone克隆一个本地库：
			git clone git@github.com:账户名/gitskills.git
		
		   如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了.

-------分支管理 ：

	分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代		码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。

	现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支		上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。

	Git鼓励使用分支，这样更加安全。
	
	命令：
	     查看分支： git branch
	     创建分支： git branch 分支名字
	     切换分支： git checkout 分支名字
	    *创建+切换分支：git checkout -b 分支名字
	     合并某分支到当前分支：git merge 分支名字
	     删除分支：	git branch -d 分支名字


